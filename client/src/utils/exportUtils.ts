import jsPDF from 'jspdf';
import { AIInsightSummary } from '../types/insights';

// Export data to CSV format
export const exportToCSV = (insights: AIInsightSummary[], filename: string = 'ai-insights') => {
  // Convert insights to CSV format
  const headers = ['Category', 'Title', 'Value', 'Trend', 'Description'];
  const csvData = insights.map(insight => [
    insight.category,
    insight.title,
    insight.value,
    insight.trend,
    insight.description
  ]);

  // Create CSV content
  const csvContent = [
    headers.join(','),
    ...csvData.map(row => row.map(field => `"${field}"`).join(','))
  ].join('\n');

  // Create and download blob
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  
  link.setAttribute('href', url);
  link.setAttribute('download', `${filename}-${new Date().toISOString().split('T')[0]}.csv`);
  link.style.visibility = 'hidden';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

// Export data to PDF format
export const exportToPDF = (insights: AIInsightSummary[], filename: string = 'ai-insights') => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  
  let yPosition = 20;
  
  // Add title
  doc.setFontSize(20);
  doc.setTextColor(40, 40, 40);
  doc.text('AI Insights Dashboard Report', pageWidth / 2, yPosition, { align: 'center' });
  
  yPosition += 15;
  
  // Add date
  doc.setFontSize(10);
  doc.setTextColor(100, 100, 100);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, pageWidth / 2, yPosition, { align: 'center' });
  
  yPosition += 20;
  
  // Add summary statistics
  doc.setFontSize(14);
  doc.setTextColor(40, 40, 40);
  doc.text('Summary Statistics', 20, yPosition);
  
  yPosition += 10;
  
  const totalInsights = insights.length;
  const avgTrend = insights.reduce((sum, insight) => sum + (insight.trend || 0), 0) / insights.length;
  const positiveTrends = insights.filter(insight => (insight.trend || 0) > 0).length;
  
  doc.setFontSize(10);
  doc.text(`Total Insights: ${totalInsights}`, 20, yPosition);
  yPosition += 6;
  doc.text(`Average Trend: ${avgTrend.toFixed(1)}%`, 20, yPosition);
  yPosition += 6;
  doc.text(`Positive Trends: ${positiveTrends}`, 20, yPosition);
  
  yPosition += 15;
  
  // Add insights table
  doc.setFontSize(14);
  doc.setTextColor(40, 40, 40);
  doc.text('Detailed Insights', 20, yPosition);
  
  yPosition += 10;
  
  // Table headers
  doc.setFillColor(240, 240, 240);
  doc.rect(20, yPosition, pageWidth - 40, 8, 'F');
  doc.setFontSize(10);
  doc.setTextColor(40, 40, 40);
  doc.text('Category', 22, yPosition + 6);
  doc.text('Title', 60, yPosition + 6);
  doc.text('Value', 120, yPosition + 6);
  doc.text('Trend', 150, yPosition + 6);
  
  yPosition += 12;
  
  // Table rows
  insights.forEach((insight, index) => {
    // Check if we need a new page
    if (yPosition > pageHeight - 20) {
      doc.addPage();
      yPosition = 20;
    }
    
    // Alternate row colors
    if (index % 2 === 0) {
      doc.setFillColor(250, 250, 250);
      doc.rect(20, yPosition - 4, pageWidth - 40, 8, 'F');
    }
    
    doc.setTextColor(40, 40, 40);
    doc.text(insight.category.charAt(0).toUpperCase() + insight.category.slice(1), 22, yPosition);
    doc.text(insight.title, 60, yPosition);
    doc.text(String(insight.value), 120, yPosition);
    
    // Color code trend values
    const trend = insight.trend || 0;
    if (trend > 0) {
      doc.setTextColor(34, 197, 94); // Green for positive
    } else if (trend < 0) {
      doc.setTextColor(239, 68, 68); // Red for negative
    } else {
      doc.setTextColor(100, 100, 100); // Gray for neutral
    }
    
    doc.text(`${trend > 0 ? '+' : ''}${trend}%`, 150, yPosition);
    
    yPosition += 8;
  });
  
  yPosition += 10;
  
  // Add footer
  doc.setFontSize(8);
  doc.setTextColor(150, 150, 150);
  doc.text('Generated by Mbarie FMS AI Dashboard', pageWidth / 2, pageHeight - 10, { align: 'center' });
  
  // Save the PDF
  doc.save(`${filename}-${new Date().toISOString().split('T')[0]}.pdf`);
};

// Export chart data to CSV
export const exportChartDataToCSV = (chartData: any[], chartTitle: string) => {
  if (!chartData || chartData.length === 0) return;
  
  const headers = Object.keys(chartData[0]);
  const csvData = chartData.map(row => 
    headers.map(header => row[header])
  );
  
  const csvContent = [
    headers.join(','),
    ...csvData.map(row => row.map(field => `"${field}"`).join(','))
  ].join('\n');
  
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  
  link.setAttribute('href', url);
  link.setAttribute('download', `${chartTitle.toLowerCase().replace(/\s+/g, '-')}-${new Date().toISOString().split('T')[0]}.csv`);
  link.style.visibility = 'hidden';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

// Export prediction data
export const exportPredictionsToCSV = (predictions: any[], modelName: string) => {
  if (!predictions || predictions.length === 0) return;
  
  const headers = ['Date', 'Predicted Value', 'Confidence', 'Lower Bound', 'Upper Bound'];
  const csvData = predictions.map(pred => [
    pred.date,
    pred.predicted,
    `${(pred.confidence * 100).toFixed(1)}%`,
    pred.lowerBound,
    pred.upperBound
  ]);
  
  const csvContent = [
    headers.join(','),
    ...csvData.map(row => row.map(field => `"${field}"`).join(','))
  ].join('\n');
  
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  
  link.setAttribute('href', url);
  link.setAttribute('download', `${modelName}-predictions-${new Date().toISOString().split('T')[0]}.csv`);
  link.style.visibility = 'hidden';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};
