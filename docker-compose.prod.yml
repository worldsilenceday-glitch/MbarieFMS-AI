version: "3.9"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mbarie-fms-ai-postgres
    environment:
      POSTGRES_DB: fms_ai
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-PROD_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - mbarie-network

  # Application Server
  server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mbarie-fms-ai-server
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD:-PROD_PASSWORD}@postgres:5432/fms_ai?schema=public
      - CLIENT_URL=${CLIENT_URL:-http://localhost:80}
      - SERVER_URL=${SERVER_URL:-http://localhost:5000}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=60d
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
      - FILE_UPLOAD_DIR=./uploads
      - MAX_FILE_SIZE_MB=25
      - AGENT_ENABLED=true
      - AGENT_POLL_INTERVAL_MS=30000
      - LOG_LEVEL=info
      - ENABLE_AI_ENDPOINTS=true
    env_file:
      - .env.prod
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - server_uploads:/app/uploads
      - server_logs:/app/logs
    restart: unless-stopped
    networks:
      - mbarie-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Production Client (Static Files with Nginx)
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.prod
    container_name: mbarie-fms-ai-client
    ports:
      - "80:80"
    environment:
      - VITE_API_URL=${SERVER_URL:-http://localhost:5000}
    depends_on:
      - server
    restart: unless-stopped
    networks:
      - mbarie-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Database Backup Service (Optional)
  backup:
    image: postgres:15-alpine
    container_name: mbarie-fms-ai-backup
    volumes:
      - ./backups:/backups
      - backup_scripts:/scripts
    environment:
      - PGHOST=postgres
      - PGPORT=5432
      - PGUSER=postgres
      - PGPASSWORD=${DB_PASSWORD:-PROD_PASSWORD}
      - PGDATABASE=fms_ai
    command: |
      sh -c '
        echo "#!/bin/sh" > /scripts/backup.sh
        echo "pg_dump -Fc fms_ai > /backups/backup_$(date +%Y%m%d_%H%M%S).dump" >> /scripts/backup.sh
        chmod +x /scripts/backup.sh
        echo "Backup script created. Run manually with: docker exec mbarie-fms-ai-backup /scripts/backup.sh"
        tail -f /dev/null
      '
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - mbarie-network

volumes:
  postgres_data:
    driver: local
  server_uploads:
    driver: local
  server_logs:
    driver: local
  backup_scripts:
    driver: local

networks:
  mbarie-network:
    driver: bridge
    name: mbarie-fms-ai-network
